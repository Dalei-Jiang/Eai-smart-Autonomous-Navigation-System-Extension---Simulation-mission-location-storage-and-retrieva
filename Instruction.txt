在学习理解了底盘已有功能的基础上，我们进行了额外功能的开发。我们试图开发一个地点管理的功能包。
3.5.1 现有缺陷的发现
在没有方便的平台搭建的前提之下，如果我们想要实现导航功能，需要将目的地的信息发布到move_base_simple/goal这一topic之中。通常，我们需要在command之中下达该命令。这显然不够便利，因为地点坐标信息的输入极为繁琐，需要将位姿信息转化为geometry_msgs/PoseWithCovarianceStamped的格式，命令并不精简。
虽然我们能够在rviz之中通过鼠标点击的方式定义目的地。但是点击的方式产生的坐标并不精确，而且地点信息无法管理和重新利用。对于没有配置rviz的控制设备，这一方法也不可用。
所以，我们认为，我们可以在这一个方面对导航系统进行进一步的开发。

3.5.2 自主导航系统的功能优化——地图地点储存管理和快速调取
我们计划建立一个能够存储地点位姿数据的数据库。利用jsoncpp，生成JSON文件，在我们希望的时候将地点数据存储进去。这种存储，可以是记录底盘现在所在的位置，也可以是录入一个任何我们喜欢的坐标。我们利用一定的数据库存储检索技术，管理我们现有的地点信息。
在导航的时候，我们只需要输入我们之前预备好的地点名称，就可以将对应的地点信息发布到move_base_simple/goal之中。这是我们希望实现的地图地点储存管理和快速调取功能。这是导航技术进一步提升可操作性的基础。
为了实现这一功能，我们在ROS之中，添加了四个新的节点：实时地点发布节点、地点信息存储节点、存储地点请求节点和目标坐标发布节点。所有详细的代码存储在附录A之中。

3.5.3 实时地点发布节点——location_scouts
前文提到过底盘自带的amcl算法功能，该功能用于自定位。AMCL算法在我们的设想之中，随着底盘的运动时刻运行。我们知道，amcl中带有一个topic，“amcl_pose”。该topic的消息格式为“geometry_msgs/PoseWithCovarianceStamped”。在这一topic之中，只要底盘发生了位移，新的位姿信息就会被发布。
介于我们需要存储现在的位姿数据，我们利用AMCL的amcl_pose，来获取底盘现在的位姿数据。我们创建节点location_scouts，订阅主题amcl_pose，提取其中的三个最重要的位置信息：横坐标x，纵坐标y和角度w。
这里，我们考虑到地点的存储请求并不稳定频繁发生，存储的命令由service的形式发布。所以，我们计划让节点location_scouts将位置信息发布到parameter manager 之中，以供其他节点读取。
该节点随其它定位、导航、控制节点一起启动。

3.5.4	地点信息存储节点——location_server
如果我们想要存储新的地址数据，正如前文所说，service是比较合理的选择。所以，我们需要建立一个server和一个client.
此处我们先新建了一个service——“location_manager”，作为存储地点命令传递的通道。同时，我们设置节点location_server，作为该服务的ServiceServer。在接受到client的消息之后，地点信息存储节点location_server将读取parameter manager中的三个地点参数，location_x，location_y，location_w，结合client发来的地点名称，将其合并存储入既有文件location.json，该JSON文件是我们存储地点信息的数据库。在存储成功之后，返回成功信息给client。
该节点随其它定位、导航、控制节点一起启动。

3.5.5	存储地点请求节点——location_client
存储地点请求节点作为service，“location_manager”的ServiceClient。此节点在launch文件运行的时候并不一同启动，而是在接受到用户的命令之后才开始运行。
存储地点请求节点在底盘运动过程中，由用户输入启动。在输入指令的时候，我们需要带有一个string类型的数据，作为我们赋予地点的名称，并接受节点location_manager的反馈。

3.5.6	目标坐标发布节点——location_goal
目标坐标发布节点在底盘运动过程中，由用户手动启动，在launch文件运行的时候并不一同启动。输入时，我们附带一个地点名称。该名称需要存在于我们现有的数据库之内，否则导航系统不会进行响应。在我们的数据库已经存储了一部分地点之后，我们通过该节点可以将目标地点坐标发布到topic，“move_base_simple/goal”之中。
在有可用路径的前提之下，借助底盘自带的navigation导航包，我们能够让底盘自行导航到目标地点。此外，我们将地点名称替换为目的地的位姿信息，同样能够实现导航功能。

3.5.7 功能总结
该功能实现了地点信息的管理，和快速导航的功能。通过建立数据库，使得路径任务的快速规划成为可能，为复杂路径任务的发布建立基础。

==================================================================================================================================================================================================================================

On the basis of learning and understanding the existing functions of the chassis, we have developed additional functions. We are trying to develop a functional package for location management.
3.5.1 Discovery of Existing Defects
On the premise that there is no convenient platform to build, if we want to realize the navigation function, we need to publish the information of the destination to the topic move_base_simple/goal. Usually, we need to issue the command in command. This is obviously not convenient, because the input of location coordinate information is extremely cumbersome, and the pose information needs to be converted into the format of geometry_msgs/PoseWithCovarianceStamped, and the command is not simplified.
Although we can define the destination by mouse click in rviz. But the coordinates generated by the way of clicking are imprecise, and the location information cannot be managed and reused. This method is also not available for control devices without rviz configured.
Therefore, we think that we can further develop the navigation system in this aspect.

3.5.2 Function optimization of autonomous navigation system - map location storage management and quick retrieval
We plan to build a database capable of storing location pose data. Using jsoncpp, generate a JSON file and store the location data in it when we want. This storage can be to record the current position of the chassis, or to enter any coordinates we like. We use certain database storage and retrieval technology to manage our existing location information.
When navigating, we only need to enter the location name we prepared earlier, and the corresponding location information can be published to move_base_simple/goal. This is the map location storage management and quick recall function we hope to achieve. This is the basis for navigation technology to further improve operability.
In order to realize this function, we added four new nodes in ROS: real-time location publishing node, location information storage node, storage location request node and target coordinate publishing node. All detailed codes are stored in Appendix A.

3.5.3 Real-time location publishing node - location_scouts
As mentioned above, the amcl algorithm function that comes with the chassis is used for self-positioning. The AMCL algorithm is in our imagination and runs with the movement of the chassis. We know that there is a topic in amcl, "amcl_pose". The message format of this topic is "geometry_msgs/PoseWithCovarianceStamped". In this topic, as long as the chassis is displaced, new pose information will be released.
Since we need to store the current pose data, we use AMCL's amcl_pose to obtain the current pose data of the chassis. We create the node location_scouts, subscribe to the topic amcl_pose, and extract the three most important location information: abscissa x, ordinate y and angle w.
Here, we consider that the storage request of the location does not occur frequently and erratically, and the storage command is issued in the form of service. Therefore, we plan to let the node location_scouts publish the location information to the parameter manager for other nodes to read.
This node starts with other positioning, navigation, control nodes.

3.5.4 Location information storage node - location_server
If we want to store new address data, as mentioned earlier, service is a reasonable choice. So, we need to create a server and a client.
Here we first create a new service - "location_manager", which is used as a channel for storing location commands. At the same time, we set the node location_server as the ServiceServer of the service. After receiving the message from the client, the location information storage node location_server will read the three location parameters in the parameter manager, location_x, location_y, location_w, combined with the location name sent by the client, and store them in the existing file location.json , the JSON file is our database for storing location information. After the storage is successful, the success information is returned to the client.
This node starts with other positioning, navigation, control nodes.

3.5.5 Storage location request node - location_client
Storage location request node as service, ServiceClient of "location_manager". This node does not start together when the launch file is run, but starts running after receiving the user's command.
The storage location request node is activated by user input during chassis motion. When entering the command, we need to have a string type of data as the name we give to the location, and accept the feedback from the node location_manager.

3.5.6 Target coordinate publishing node - location_goal
The target coordinate publishing node is manually started by the user during the movement of the chassis, and is not started together when the launch file is running. When entering, we include a location name. This name needs to exist within our existing database, otherwise the navigation system will not respond. After our database has stored a part of the location, we can publish the target location coordinates to the topic, "move_base_simple/goal" through this node.
Under the premise that there is an available path, with the help of the navigation package that comes with the chassis, we can let the chassis navigate to the target location by itself. In addition, we replace the location name with the pose information of the destination, which can also realize the navigation function.

3.5.7 Function Summary
This function realizes the management of location information and the function of quick navigation. By establishing a database, it is possible to quickly plan route tasks and establish a foundation for the release of complex route tasks.
